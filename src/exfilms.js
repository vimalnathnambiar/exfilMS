#!/usr/bin/env node

/* eslint-disable no-console */
/* eslint-disable func-names */

import { readFileSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';

import chalk from 'chalk';
import clear from 'clear';
import figlet from 'figlet';
import inquirer from 'inquirer';

import { createDefaultDirectories } from './createDefaultDirectories.js';
import { prompts } from './inquirerPrompts.js';
import { parseMZML } from './parseMZML.js';
import { setForSpectraFiltering } from './setForSpectraFiltering.js';
import { writeLog } from './writeLog.js';
import { yargsCheck } from './yargsCheck.js';
import { argv } from './yargsConfig.js';

/**
 * Figlet callback function to display ASCII art and execute the CLI tool.
 * @param {?Error} err The error object, if any occurred during execution.
 * @param {string} data The ASCII art generated by figlet.
 * @returns {void}
 */
figlet('ExfilMS', async function (err, data) {
  // If error occurs during ASCII generation
  if (err) {
    console.error(`${err.toString()}`);
  }

  try {
    // Display the ASCII art banner with package information
    clear();
    const pkg = JSON.parse(
      readFileSync(
        join(dirname(fileURLToPath(import.meta.url)), '..', 'package.json'),
        'utf-8',
      ),
    );
    console.log(
      `${chalk.bold.yellowBright(data)}\n${chalk.grey(
        `Version ${pkg.version} ${pkg.author}\n${pkg.description}\n`,
      )}`,
    );

    // Check if CLI is executed in interactive mode
    let configParam = {};
    if (argv.interactive) {
      // If interactive mode
      configParam = await inquirer.prompt(prompts);
      if (configParam.msLevel) {
        configParam.msLevel = configParam.msLevel.split(' ').map(Number);
      }
      console.log('');
    } else {
      // Check yargs arguments and set up appropriately
      configParam = await yargsCheck(argv);
    }

    // Set spectra filtering method if defined
    configParam = await setForSpectraFiltering(configParam);

    // Create output and log directories based on configuration
    await createDefaultDirectories(configParam);

    // Display and write configuration parameters into log file
    console.log('Configuration Parameters:');
    console.log(configParam);
    await writeLog(
      configParam.logDirectory,
      `Configuration Parameters\n${JSON.stringify(configParam, null, '\t')}\n`,
    );

    // Parse mzML data files for extraction
    await parseMZML(configParam);
  } catch (err) {
    console.error(`\n${err.toString()}\n`);
  } finally {
    console.log('ExfilMS process complete');
  }
});
