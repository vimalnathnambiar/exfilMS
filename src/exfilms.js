#!/usr/bin/env node

/* eslint-disable no-console */

import { readFileSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';

import chalk from 'chalk';
import clear from 'clear';
import figlet from 'figlet';
import inquirer from 'inquirer';

import { createDefaultDirectories } from './utils/createDefaultDirectories.js';
import { prompts } from './utils/inquirerPrompts.js';
import { processMZML } from './utils/processMZML.js';
import { setForSpectraFiltering } from './utils/setForSpectraFiltering.js';
import { setInquirerConfig } from './utils/setInquirerConfig.js';
import { writeLog } from './utils/writeLog.js';
import { yargsCheck } from './utils/yargsCheck.js';
import { argv } from './utils/yargsConfig.js';

/**
 * Figlet callback function to display ASCII art and execute the CLI tool.
 * @param {?Error} err The error object, if any occurred during execution.
 * @param {string} data The ASCII art generated by figlet.
 * @returns {void}
 */
figlet('ExfilMS', async (err, data) => {
  // If error occurs during ASCII generation
  if (err) {
    console.error(`${err.toString()}`);
  }

  try {
    // Display the ASCII art banner with package information
    clear();
    const pkg = JSON.parse(
      readFileSync(
        join(dirname(fileURLToPath(import.meta.url)), '..', 'package.json'),
        'utf-8',
      ),
    );
    console.log(
      `${chalk.bold.yellowBright(data)}\n${chalk.grey(
        `Version ${pkg.version} ${pkg.author}\n${pkg.description}\n`,
      )}`,
    );

    // Check if CLI is executed in interactive mode
    let configParam = {};
    if (argv.interactive) {
      // If interactive mode
      configParam = await inquirer.prompt(prompts);
      console.log('');

      // Set up configuration parameters received via Inquirer appropriately
      configParam = await setInquirerConfig(configParam);
    } else {
      // Check and set up configuration parameters received via Yargs appropriately
      configParam = await yargsCheck(argv);
    }

    // Determine if decimal place is a number or NaN
    configParam.decimalPlace = Number(configParam.decimalPlace);

    // Set for spectra filtering method if defined (targeted m/z or m/z range filtering)
    if (configParam.targeted || configParam.mzRange) {
      configParam = await setForSpectraFiltering(configParam);
    }

    // Create default directories (output and log)
    await createDefaultDirectories(configParam);

    // Display and write configuration parameters into log file
    console.log('Configuration Parameters:');
    console.log(configParam);
    await writeLog(
      configParam.logDirectory,
      `Configuration Parameters\n${JSON.stringify(configParam, null, '\t')}\n`,
    );

    // Process mzML data files for MS data extraction
    await processMZML(configParam);
  } catch (err) {
    console.error(`\n${err.toString()}`);
  } finally {
    console.log('\nExfilMS process complete');
  }
});
